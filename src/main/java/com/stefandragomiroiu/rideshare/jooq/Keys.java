/*
 * This file is generated by jOOQ.
 */
package com.stefandragomiroiu.rideshare.jooq;


import com.stefandragomiroiu.rideshare.jooq.tables.Booking;
import com.stefandragomiroiu.rideshare.jooq.tables.BookingConnection;
import com.stefandragomiroiu.rideshare.jooq.tables.Location;
import com.stefandragomiroiu.rideshare.jooq.tables.Ride;
import com.stefandragomiroiu.rideshare.jooq.tables.RideConnection;
import com.stefandragomiroiu.rideshare.jooq.tables.RideRating;
import com.stefandragomiroiu.rideshare.jooq.tables.User;
import com.stefandragomiroiu.rideshare.jooq.tables.Vehicle;
import com.stefandragomiroiu.rideshare.jooq.tables.records.BookingConnectionRecord;
import com.stefandragomiroiu.rideshare.jooq.tables.records.BookingRecord;
import com.stefandragomiroiu.rideshare.jooq.tables.records.LocationRecord;
import com.stefandragomiroiu.rideshare.jooq.tables.records.RideConnectionRecord;
import com.stefandragomiroiu.rideshare.jooq.tables.records.RideRatingRecord;
import com.stefandragomiroiu.rideshare.jooq.tables.records.RideRecord;
import com.stefandragomiroiu.rideshare.jooq.tables.records.UserRecord;
import com.stefandragomiroiu.rideshare.jooq.tables.records.VehicleRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BookingRecord> BOOKING_PKEY = Internal.createUniqueKey(Booking.BOOKING, DSL.name("booking_pkey"), new TableField[] { Booking.BOOKING.BOOKING_ID }, true);
    public static final UniqueKey<BookingConnectionRecord> BOOKING_CONNECTION_PKEY = Internal.createUniqueKey(BookingConnection.BOOKING_CONNECTION, DSL.name("booking_connection_pkey"), new TableField[] { BookingConnection.BOOKING_CONNECTION.BOOKING_ID, BookingConnection.BOOKING_CONNECTION.CONNECTION_ID }, true);
    public static final UniqueKey<LocationRecord> LOCATION_PKEY = Internal.createUniqueKey(Location.LOCATION, DSL.name("location_pkey"), new TableField[] { Location.LOCATION.LOCATION_ID }, true);
    public static final UniqueKey<RideRecord> RIDE_PKEY = Internal.createUniqueKey(Ride.RIDE, DSL.name("ride_pkey"), new TableField[] { Ride.RIDE.RIDE_ID }, true);
    public static final UniqueKey<RideConnectionRecord> RIDE_CONNECTION_PKEY = Internal.createUniqueKey(RideConnection.RIDE_CONNECTION, DSL.name("ride_connection_pkey"), new TableField[] { RideConnection.RIDE_CONNECTION.CONNECTION_ID }, true);
    public static final UniqueKey<RideRatingRecord> RIDE_RATING_PKEY = Internal.createUniqueKey(RideRating.RIDE_RATING, DSL.name("ride_rating_pkey"), new TableField[] { RideRating.RIDE_RATING.RIDE_ID, RideRating.RIDE_RATING.USER_ID }, true);
    public static final UniqueKey<UserRecord> USER_EMAIL_KEY = Internal.createUniqueKey(User.USER, DSL.name("user_email_key"), new TableField[] { User.USER.EMAIL }, true);
    public static final UniqueKey<UserRecord> USER_PKEY = Internal.createUniqueKey(User.USER, DSL.name("user_pkey"), new TableField[] { User.USER.USER_ID }, true);
    public static final UniqueKey<VehicleRecord> VEHICLE_PKEY = Internal.createUniqueKey(Vehicle.VEHICLE, DSL.name("vehicle_pkey"), new TableField[] { Vehicle.VEHICLE.PLATE_NUMBER }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BookingRecord, UserRecord> BOOKING__BOOKING_USER_ID_FKEY = Internal.createForeignKey(Booking.BOOKING, DSL.name("booking_user_id_fkey"), new TableField[] { Booking.BOOKING.USER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.USER_ID }, true);
    public static final ForeignKey<BookingConnectionRecord, BookingRecord> BOOKING_CONNECTION__BOOKING_CONNECTION_BOOKING_ID_FKEY = Internal.createForeignKey(BookingConnection.BOOKING_CONNECTION, DSL.name("booking_connection_booking_id_fkey"), new TableField[] { BookingConnection.BOOKING_CONNECTION.BOOKING_ID }, Keys.BOOKING_PKEY, new TableField[] { Booking.BOOKING.BOOKING_ID }, true);
    public static final ForeignKey<BookingConnectionRecord, RideConnectionRecord> BOOKING_CONNECTION__BOOKING_CONNECTION_CONNECTION_ID_FKEY = Internal.createForeignKey(BookingConnection.BOOKING_CONNECTION, DSL.name("booking_connection_connection_id_fkey"), new TableField[] { BookingConnection.BOOKING_CONNECTION.CONNECTION_ID }, Keys.RIDE_CONNECTION_PKEY, new TableField[] { RideConnection.RIDE_CONNECTION.CONNECTION_ID }, true);
    public static final ForeignKey<RideRecord, UserRecord> RIDE__RIDE_DRIVER_FKEY = Internal.createForeignKey(Ride.RIDE, DSL.name("ride_driver_fkey"), new TableField[] { Ride.RIDE.DRIVER }, Keys.USER_PKEY, new TableField[] { User.USER.USER_ID }, true);
    public static final ForeignKey<RideRecord, VehicleRecord> RIDE__RIDE_VEHICLE_FKEY = Internal.createForeignKey(Ride.RIDE, DSL.name("ride_vehicle_fkey"), new TableField[] { Ride.RIDE.VEHICLE }, Keys.VEHICLE_PKEY, new TableField[] { Vehicle.VEHICLE.PLATE_NUMBER }, true);
    public static final ForeignKey<RideConnectionRecord, LocationRecord> RIDE_CONNECTION__RIDE_CONNECTION_ARRIVAL_LOCATION_FKEY = Internal.createForeignKey(RideConnection.RIDE_CONNECTION, DSL.name("ride_connection_arrival_location_fkey"), new TableField[] { RideConnection.RIDE_CONNECTION.ARRIVAL_LOCATION }, Keys.LOCATION_PKEY, new TableField[] { Location.LOCATION.LOCATION_ID }, true);
    public static final ForeignKey<RideConnectionRecord, LocationRecord> RIDE_CONNECTION__RIDE_CONNECTION_DEPARTURE_LOCATION_FKEY = Internal.createForeignKey(RideConnection.RIDE_CONNECTION, DSL.name("ride_connection_departure_location_fkey"), new TableField[] { RideConnection.RIDE_CONNECTION.DEPARTURE_LOCATION }, Keys.LOCATION_PKEY, new TableField[] { Location.LOCATION.LOCATION_ID }, true);
    public static final ForeignKey<RideConnectionRecord, RideRecord> RIDE_CONNECTION__RIDE_CONNECTION_RIDE_ID_FKEY = Internal.createForeignKey(RideConnection.RIDE_CONNECTION, DSL.name("ride_connection_ride_id_fkey"), new TableField[] { RideConnection.RIDE_CONNECTION.RIDE_ID }, Keys.RIDE_PKEY, new TableField[] { Ride.RIDE.RIDE_ID }, true);
    public static final ForeignKey<RideRatingRecord, RideRecord> RIDE_RATING__RIDE_RATING_RIDE_ID_FKEY = Internal.createForeignKey(RideRating.RIDE_RATING, DSL.name("ride_rating_ride_id_fkey"), new TableField[] { RideRating.RIDE_RATING.RIDE_ID }, Keys.RIDE_PKEY, new TableField[] { Ride.RIDE.RIDE_ID }, true);
    public static final ForeignKey<RideRatingRecord, UserRecord> RIDE_RATING__RIDE_RATING_USER_ID_FKEY = Internal.createForeignKey(RideRating.RIDE_RATING, DSL.name("ride_rating_user_id_fkey"), new TableField[] { RideRating.RIDE_RATING.USER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.USER_ID }, true);
    public static final ForeignKey<VehicleRecord, UserRecord> VEHICLE__VEHICLE_OWNER_FKEY = Internal.createForeignKey(Vehicle.VEHICLE, DSL.name("vehicle_owner_fkey"), new TableField[] { Vehicle.VEHICLE.OWNER }, Keys.USER_PKEY, new TableField[] { User.USER.USER_ID }, true);
}
