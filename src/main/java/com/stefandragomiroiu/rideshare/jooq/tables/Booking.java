/*
 * This file is generated by jOOQ.
 */
package com.stefandragomiroiu.rideshare.jooq.tables;


import com.stefandragomiroiu.rideshare.jooq.Keys;
import com.stefandragomiroiu.rideshare.jooq.Public;
import com.stefandragomiroiu.rideshare.jooq.tables.records.BookingRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Booking extends TableImpl<BookingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.booking</code>
     */
    public static final Booking BOOKING = new Booking();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookingRecord> getRecordType() {
        return BookingRecord.class;
    }

    /**
     * The column <code>public.booking.booking_id</code>.
     */
    public final TableField<BookingRecord, Long> BOOKING_ID = createField(DSL.name("booking_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.booking.user_id</code>.
     */
    public final TableField<BookingRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.booking.adults</code>.
     */
    public final TableField<BookingRecord, Integer> ADULTS = createField(DSL.name("adults"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.booking.children</code>.
     */
    public final TableField<BookingRecord, Integer> CHILDREN = createField(DSL.name("children"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.booking.confirmed</code>.
     */
    public final TableField<BookingRecord, Boolean> CONFIRMED = createField(DSL.name("confirmed"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.booking.booked_at</code>.
     */
    public final TableField<BookingRecord, LocalDateTime> BOOKED_AT = createField(DSL.name("booked_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private Booking(Name alias, Table<BookingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Booking(Name alias, Table<BookingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.booking</code> table reference
     */
    public Booking(String alias) {
        this(DSL.name(alias), BOOKING);
    }

    /**
     * Create an aliased <code>public.booking</code> table reference
     */
    public Booking(Name alias) {
        this(alias, BOOKING);
    }

    /**
     * Create a <code>public.booking</code> table reference
     */
    public Booking() {
        this(DSL.name("booking"), null);
    }

    public <O extends Record> Booking(Table<O> child, ForeignKey<O, BookingRecord> key) {
        super(child, key, BOOKING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<BookingRecord, Long> getIdentity() {
        return (Identity<BookingRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BookingRecord> getPrimaryKey() {
        return Keys.BOOKING_PKEY;
    }

    @Override
    public List<ForeignKey<BookingRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BOOKING__BOOKING_USER_ID_FKEY);
    }

    private transient User _user;

    /**
     * Get the implicit join path to the <code>public.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.BOOKING__BOOKING_USER_ID_FKEY);

        return _user;
    }

    @Override
    public Booking as(String alias) {
        return new Booking(DSL.name(alias), this);
    }

    @Override
    public Booking as(Name alias) {
        return new Booking(alias, this);
    }

    @Override
    public Booking as(Table<?> alias) {
        return new Booking(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Booking rename(String name) {
        return new Booking(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Booking rename(Name name) {
        return new Booking(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Booking rename(Table<?> name) {
        return new Booking(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Integer, Integer, Boolean, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Long, ? super Integer, ? super Integer, ? super Boolean, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Long, ? super Integer, ? super Integer, ? super Boolean, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
