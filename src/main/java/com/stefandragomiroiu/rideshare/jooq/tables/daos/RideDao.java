/*
 * This file is generated by jOOQ.
 */
package com.stefandragomiroiu.rideshare.jooq.tables.daos;


import com.stefandragomiroiu.rideshare.jooq.AbstractSpringDAOImpl;
import com.stefandragomiroiu.rideshare.jooq.enums.RideStatus;
import com.stefandragomiroiu.rideshare.jooq.tables.Ride;
import com.stefandragomiroiu.rideshare.jooq.tables.records.RideRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Repository
public class RideDao extends AbstractSpringDAOImpl<RideRecord, com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride, Long> {

    /**
     * Create a new RideDao without any configuration
     */
    public RideDao() {
        super(Ride.RIDE, com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride.class);
    }

    /**
     * Create a new RideDao with an attached configuration
     */
    @Autowired
    public RideDao(Configuration configuration) {
        super(Ride.RIDE, com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride.class, configuration);
    }

    @Override
    public Long getId(com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride object) {
        return object.getRideId();
    }

    /**
     * Fetch records that have <code>ride_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride> fetchRangeOfRideId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Ride.RIDE.RIDE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ride_id IN (values)</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride> fetchByRideId(Long... values) {
        return fetch(Ride.RIDE.RIDE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>ride_id = value</code>
     */
    public com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride fetchOneByRideId(Long value) {
        return fetchOne(Ride.RIDE.RIDE_ID, value);
    }

    /**
     * Fetch a unique record that has <code>ride_id = value</code>
     */
    public Optional<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride> fetchOptionalByRideId(Long value) {
        return fetchOptional(Ride.RIDE.RIDE_ID, value);
    }

    /**
     * Fetch records that have <code>driver BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride> fetchRangeOfDriver(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Ride.RIDE.DRIVER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>driver IN (values)</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride> fetchByDriver(Long... values) {
        return fetch(Ride.RIDE.DRIVER, values);
    }

    /**
     * Fetch records that have <code>departure_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride> fetchRangeOfDepartureDate(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(Ride.RIDE.DEPARTURE_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>departure_date IN (values)</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride> fetchByDepartureDate(LocalDate... values) {
        return fetch(Ride.RIDE.DEPARTURE_DATE, values);
    }

    /**
     * Fetch records that have <code>seats BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride> fetchRangeOfSeats(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Ride.RIDE.SEATS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>seats IN (values)</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride> fetchBySeats(Integer... values) {
        return fetch(Ride.RIDE.SEATS, values);
    }

    /**
     * Fetch records that have <code>additional_comment BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride> fetchRangeOfAdditionalComment(String lowerInclusive, String upperInclusive) {
        return fetchRange(Ride.RIDE.ADDITIONAL_COMMENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>additional_comment IN (values)</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride> fetchByAdditionalComment(String... values) {
        return fetch(Ride.RIDE.ADDITIONAL_COMMENT, values);
    }

    /**
     * Fetch records that have <code>vehicle BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride> fetchRangeOfVehicle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Ride.RIDE.VEHICLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>vehicle IN (values)</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride> fetchByVehicle(String... values) {
        return fetch(Ride.RIDE.VEHICLE, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride> fetchRangeOfStatus(RideStatus lowerInclusive, RideStatus upperInclusive) {
        return fetchRange(Ride.RIDE.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride> fetchByStatus(RideStatus... values) {
        return fetch(Ride.RIDE.STATUS, values);
    }

    /**
     * Fetch records that have <code>posted_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride> fetchRangeOfPostedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Ride.RIDE.POSTED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>posted_at IN (values)</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride> fetchByPostedAt(LocalDateTime... values) {
        return fetch(Ride.RIDE.POSTED_AT, values);
    }
}
