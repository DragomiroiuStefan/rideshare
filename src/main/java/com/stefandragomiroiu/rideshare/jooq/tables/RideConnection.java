/*
 * This file is generated by jOOQ.
 */
package com.stefandragomiroiu.rideshare.jooq.tables;


import com.stefandragomiroiu.rideshare.jooq.Keys;
import com.stefandragomiroiu.rideshare.jooq.Public;
import com.stefandragomiroiu.rideshare.jooq.tables.records.RideConnectionRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RideConnection extends TableImpl<RideConnectionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ride_connection</code>
     */
    public static final RideConnection RIDE_CONNECTION = new RideConnection();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RideConnectionRecord> getRecordType() {
        return RideConnectionRecord.class;
    }

    /**
     * The column <code>public.ride_connection.connection_id</code>.
     */
    public final TableField<RideConnectionRecord, Long> CONNECTION_ID = createField(DSL.name("connection_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.ride_connection.departure_location</code>.
     */
    public final TableField<RideConnectionRecord, Long> DEPARTURE_LOCATION = createField(DSL.name("departure_location"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.ride_connection.arrival_location</code>.
     */
    public final TableField<RideConnectionRecord, Long> ARRIVAL_LOCATION = createField(DSL.name("arrival_location"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.ride_connection.departure_time</code>.
     */
    public final TableField<RideConnectionRecord, LocalDateTime> DEPARTURE_TIME = createField(DSL.name("departure_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.ride_connection.arrival_time</code>.
     */
    public final TableField<RideConnectionRecord, LocalDateTime> ARRIVAL_TIME = createField(DSL.name("arrival_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.ride_connection.departure_address</code>.
     */
    public final TableField<RideConnectionRecord, String> DEPARTURE_ADDRESS = createField(DSL.name("departure_address"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.ride_connection.arrival_address</code>.
     */
    public final TableField<RideConnectionRecord, String> ARRIVAL_ADDRESS = createField(DSL.name("arrival_address"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.ride_connection.price</code>.
     */
    public final TableField<RideConnectionRecord, Integer> PRICE = createField(DSL.name("price"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.ride_connection.ride_id</code>.
     */
    public final TableField<RideConnectionRecord, Long> RIDE_ID = createField(DSL.name("ride_id"), SQLDataType.BIGINT, this, "");

    private RideConnection(Name alias, Table<RideConnectionRecord> aliased) {
        this(alias, aliased, null);
    }

    private RideConnection(Name alias, Table<RideConnectionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ride_connection</code> table reference
     */
    public RideConnection(String alias) {
        this(DSL.name(alias), RIDE_CONNECTION);
    }

    /**
     * Create an aliased <code>public.ride_connection</code> table reference
     */
    public RideConnection(Name alias) {
        this(alias, RIDE_CONNECTION);
    }

    /**
     * Create a <code>public.ride_connection</code> table reference
     */
    public RideConnection() {
        this(DSL.name("ride_connection"), null);
    }

    public <O extends Record> RideConnection(Table<O> child, ForeignKey<O, RideConnectionRecord> key) {
        super(child, key, RIDE_CONNECTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<RideConnectionRecord, Long> getIdentity() {
        return (Identity<RideConnectionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RideConnectionRecord> getPrimaryKey() {
        return Keys.RIDE_CONNECTION_PKEY;
    }

    @Override
    public List<ForeignKey<RideConnectionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RIDE_CONNECTION__RIDE_CONNECTION_DEPARTURE_LOCATION_FKEY, Keys.RIDE_CONNECTION__RIDE_CONNECTION_ARRIVAL_LOCATION_FKEY, Keys.RIDE_CONNECTION__RIDE_CONNECTION_RIDE_ID_FKEY);
    }

    private transient Location _rideConnectionDepartureLocationFkey;
    private transient Location _rideConnectionArrivalLocationFkey;
    private transient Ride _ride;

    /**
     * Get the implicit join path to the <code>public.location</code> table, via
     * the <code>ride_connection_departure_location_fkey</code> key.
     */
    public Location rideConnectionDepartureLocationFkey() {
        if (_rideConnectionDepartureLocationFkey == null)
            _rideConnectionDepartureLocationFkey = new Location(this, Keys.RIDE_CONNECTION__RIDE_CONNECTION_DEPARTURE_LOCATION_FKEY);

        return _rideConnectionDepartureLocationFkey;
    }

    /**
     * Get the implicit join path to the <code>public.location</code> table, via
     * the <code>ride_connection_arrival_location_fkey</code> key.
     */
    public Location rideConnectionArrivalLocationFkey() {
        if (_rideConnectionArrivalLocationFkey == null)
            _rideConnectionArrivalLocationFkey = new Location(this, Keys.RIDE_CONNECTION__RIDE_CONNECTION_ARRIVAL_LOCATION_FKEY);

        return _rideConnectionArrivalLocationFkey;
    }

    /**
     * Get the implicit join path to the <code>public.ride</code> table.
     */
    public Ride ride() {
        if (_ride == null)
            _ride = new Ride(this, Keys.RIDE_CONNECTION__RIDE_CONNECTION_RIDE_ID_FKEY);

        return _ride;
    }

    @Override
    public RideConnection as(String alias) {
        return new RideConnection(DSL.name(alias), this);
    }

    @Override
    public RideConnection as(Name alias) {
        return new RideConnection(alias, this);
    }

    @Override
    public RideConnection as(Table<?> alias) {
        return new RideConnection(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RideConnection rename(String name) {
        return new RideConnection(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RideConnection rename(Name name) {
        return new RideConnection(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RideConnection rename(Table<?> name) {
        return new RideConnection(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Long, LocalDateTime, LocalDateTime, String, String, Integer, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super Long, ? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super String, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super Long, ? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super String, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
