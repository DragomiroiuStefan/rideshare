/*
 * This file is generated by jOOQ.
 */
package com.stefandragomiroiu.rideshare.jooq.tables.records;


import com.stefandragomiroiu.rideshare.jooq.tables.Location;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class LocationRecord extends UpdatableRecordImpl<LocationRecord> implements Record3<Long, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.location.location_id</code>.
     */
    public void setLocationId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.location.location_id</code>.
     */
    public Long getLocationId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.location.city</code>.
     */
    public void setCity(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.location.city</code>.
     */
    public String getCity() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.location.county</code>.
     */
    public void setCounty(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.location.county</code>.
     */
    public String getCounty() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Location.LOCATION.LOCATION_ID;
    }

    @Override
    public Field<String> field2() {
        return Location.LOCATION.CITY;
    }

    @Override
    public Field<String> field3() {
        return Location.LOCATION.COUNTY;
    }

    @Override
    public Long component1() {
        return getLocationId();
    }

    @Override
    public String component2() {
        return getCity();
    }

    @Override
    public String component3() {
        return getCounty();
    }

    @Override
    public Long value1() {
        return getLocationId();
    }

    @Override
    public String value2() {
        return getCity();
    }

    @Override
    public String value3() {
        return getCounty();
    }

    @Override
    public LocationRecord value1(Long value) {
        setLocationId(value);
        return this;
    }

    @Override
    public LocationRecord value2(String value) {
        setCity(value);
        return this;
    }

    @Override
    public LocationRecord value3(String value) {
        setCounty(value);
        return this;
    }

    @Override
    public LocationRecord values(Long value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LocationRecord
     */
    public LocationRecord() {
        super(Location.LOCATION);
    }

    /**
     * Create a detached, initialised LocationRecord
     */
    public LocationRecord(Long locationId, String city, String county) {
        super(Location.LOCATION);

        setLocationId(locationId);
        setCity(city);
        setCounty(county);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised LocationRecord
     */
    public LocationRecord(com.stefandragomiroiu.rideshare.jooq.tables.pojos.Location value) {
        super(Location.LOCATION);

        if (value != null) {
            setLocationId(value.getLocationId());
            setCity(value.getCity());
            setCounty(value.getCounty());
            resetChangedOnNotNull();
        }
    }
}
