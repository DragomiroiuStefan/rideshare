/*
 * This file is generated by jOOQ.
 */
package com.stefandragomiroiu.rideshare.jooq.tables.records;


import com.stefandragomiroiu.rideshare.jooq.enums.RideStatus;
import com.stefandragomiroiu.rideshare.jooq.tables.Ride;

import java.time.LocalDate;
import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RideRecord extends UpdatableRecordImpl<RideRecord> implements Record8<Long, Long, LocalDate, Integer, String, String, RideStatus, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.ride.ride_id</code>.
     */
    public void setRideId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.ride.ride_id</code>.
     */
    public Long getRideId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.ride.driver</code>.
     */
    public void setDriver(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.ride.driver</code>.
     */
    public Long getDriver() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.ride.departure_date</code>.
     */
    public void setDepartureDate(LocalDate value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.ride.departure_date</code>.
     */
    public LocalDate getDepartureDate() {
        return (LocalDate) get(2);
    }

    /**
     * Setter for <code>public.ride.seats</code>.
     */
    public void setSeats(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.ride.seats</code>.
     */
    public Integer getSeats() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>public.ride.additional_comment</code>.
     */
    public void setAdditionalComment(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.ride.additional_comment</code>.
     */
    public String getAdditionalComment() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.ride.vehicle</code>.
     */
    public void setVehicle(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.ride.vehicle</code>.
     */
    public String getVehicle() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.ride.status</code>.
     */
    public void setStatus(RideStatus value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.ride.status</code>.
     */
    public RideStatus getStatus() {
        return (RideStatus) get(6);
    }

    /**
     * Setter for <code>public.ride.posted_at</code>.
     */
    public void setPostedAt(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.ride.posted_at</code>.
     */
    public LocalDateTime getPostedAt() {
        return (LocalDateTime) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, LocalDate, Integer, String, String, RideStatus, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, Long, LocalDate, Integer, String, String, RideStatus, LocalDateTime> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Ride.RIDE.RIDE_ID;
    }

    @Override
    public Field<Long> field2() {
        return Ride.RIDE.DRIVER;
    }

    @Override
    public Field<LocalDate> field3() {
        return Ride.RIDE.DEPARTURE_DATE;
    }

    @Override
    public Field<Integer> field4() {
        return Ride.RIDE.SEATS;
    }

    @Override
    public Field<String> field5() {
        return Ride.RIDE.ADDITIONAL_COMMENT;
    }

    @Override
    public Field<String> field6() {
        return Ride.RIDE.VEHICLE;
    }

    @Override
    public Field<RideStatus> field7() {
        return Ride.RIDE.STATUS;
    }

    @Override
    public Field<LocalDateTime> field8() {
        return Ride.RIDE.POSTED_AT;
    }

    @Override
    public Long component1() {
        return getRideId();
    }

    @Override
    public Long component2() {
        return getDriver();
    }

    @Override
    public LocalDate component3() {
        return getDepartureDate();
    }

    @Override
    public Integer component4() {
        return getSeats();
    }

    @Override
    public String component5() {
        return getAdditionalComment();
    }

    @Override
    public String component6() {
        return getVehicle();
    }

    @Override
    public RideStatus component7() {
        return getStatus();
    }

    @Override
    public LocalDateTime component8() {
        return getPostedAt();
    }

    @Override
    public Long value1() {
        return getRideId();
    }

    @Override
    public Long value2() {
        return getDriver();
    }

    @Override
    public LocalDate value3() {
        return getDepartureDate();
    }

    @Override
    public Integer value4() {
        return getSeats();
    }

    @Override
    public String value5() {
        return getAdditionalComment();
    }

    @Override
    public String value6() {
        return getVehicle();
    }

    @Override
    public RideStatus value7() {
        return getStatus();
    }

    @Override
    public LocalDateTime value8() {
        return getPostedAt();
    }

    @Override
    public RideRecord value1(Long value) {
        setRideId(value);
        return this;
    }

    @Override
    public RideRecord value2(Long value) {
        setDriver(value);
        return this;
    }

    @Override
    public RideRecord value3(LocalDate value) {
        setDepartureDate(value);
        return this;
    }

    @Override
    public RideRecord value4(Integer value) {
        setSeats(value);
        return this;
    }

    @Override
    public RideRecord value5(String value) {
        setAdditionalComment(value);
        return this;
    }

    @Override
    public RideRecord value6(String value) {
        setVehicle(value);
        return this;
    }

    @Override
    public RideRecord value7(RideStatus value) {
        setStatus(value);
        return this;
    }

    @Override
    public RideRecord value8(LocalDateTime value) {
        setPostedAt(value);
        return this;
    }

    @Override
    public RideRecord values(Long value1, Long value2, LocalDate value3, Integer value4, String value5, String value6, RideStatus value7, LocalDateTime value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RideRecord
     */
    public RideRecord() {
        super(Ride.RIDE);
    }

    /**
     * Create a detached, initialised RideRecord
     */
    public RideRecord(Long rideId, Long driver, LocalDate departureDate, Integer seats, String additionalComment, String vehicle, RideStatus status, LocalDateTime postedAt) {
        super(Ride.RIDE);

        setRideId(rideId);
        setDriver(driver);
        setDepartureDate(departureDate);
        setSeats(seats);
        setAdditionalComment(additionalComment);
        setVehicle(vehicle);
        setStatus(status);
        setPostedAt(postedAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised RideRecord
     */
    public RideRecord(com.stefandragomiroiu.rideshare.jooq.tables.pojos.Ride value) {
        super(Ride.RIDE);

        if (value != null) {
            setRideId(value.getRideId());
            setDriver(value.getDriver());
            setDepartureDate(value.getDepartureDate());
            setSeats(value.getSeats());
            setAdditionalComment(value.getAdditionalComment());
            setVehicle(value.getVehicle());
            setStatus(value.getStatus());
            setPostedAt(value.getPostedAt());
            resetChangedOnNotNull();
        }
    }
}
