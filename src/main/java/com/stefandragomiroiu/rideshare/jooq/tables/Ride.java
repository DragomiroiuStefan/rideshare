/*
 * This file is generated by jOOQ.
 */
package com.stefandragomiroiu.rideshare.jooq.tables;


import com.stefandragomiroiu.rideshare.jooq.Keys;
import com.stefandragomiroiu.rideshare.jooq.Public;
import com.stefandragomiroiu.rideshare.jooq.enums.RideStatus;
import com.stefandragomiroiu.rideshare.jooq.tables.records.RideRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Ride extends TableImpl<RideRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ride</code>
     */
    public static final Ride RIDE = new Ride();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RideRecord> getRecordType() {
        return RideRecord.class;
    }

    /**
     * The column <code>public.ride.ride_id</code>.
     */
    public final TableField<RideRecord, Long> RIDE_ID = createField(DSL.name("ride_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.ride.driver</code>.
     */
    public final TableField<RideRecord, Long> DRIVER = createField(DSL.name("driver"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ride.departure_date</code>.
     */
    public final TableField<RideRecord, LocalDate> DEPARTURE_DATE = createField(DSL.name("departure_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.ride.seats</code>.
     */
    public final TableField<RideRecord, Integer> SEATS = createField(DSL.name("seats"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.ride.additional_comment</code>.
     */
    public final TableField<RideRecord, String> ADDITIONAL_COMMENT = createField(DSL.name("additional_comment"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.ride.vehicle</code>.
     */
    public final TableField<RideRecord, String> VEHICLE = createField(DSL.name("vehicle"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.ride.status</code>.
     */
    public final TableField<RideRecord, RideStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.asEnumDataType(com.stefandragomiroiu.rideshare.jooq.enums.RideStatus.class), this, "");

    /**
     * The column <code>public.ride.posted_at</code>.
     */
    public final TableField<RideRecord, LocalDateTime> POSTED_AT = createField(DSL.name("posted_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private Ride(Name alias, Table<RideRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ride(Name alias, Table<RideRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ride</code> table reference
     */
    public Ride(String alias) {
        this(DSL.name(alias), RIDE);
    }

    /**
     * Create an aliased <code>public.ride</code> table reference
     */
    public Ride(Name alias) {
        this(alias, RIDE);
    }

    /**
     * Create a <code>public.ride</code> table reference
     */
    public Ride() {
        this(DSL.name("ride"), null);
    }

    public <O extends Record> Ride(Table<O> child, ForeignKey<O, RideRecord> key) {
        super(child, key, RIDE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<RideRecord, Long> getIdentity() {
        return (Identity<RideRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RideRecord> getPrimaryKey() {
        return Keys.RIDE_PKEY;
    }

    @Override
    public List<ForeignKey<RideRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RIDE__RIDE_DRIVER_FKEY, Keys.RIDE__RIDE_VEHICLE_FKEY);
    }

    private transient User _user;
    private transient Vehicle _vehicle;

    /**
     * Get the implicit join path to the <code>public.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.RIDE__RIDE_DRIVER_FKEY);

        return _user;
    }

    /**
     * Get the implicit join path to the <code>public.vehicle</code> table.
     */
    public Vehicle vehicle() {
        if (_vehicle == null)
            _vehicle = new Vehicle(this, Keys.RIDE__RIDE_VEHICLE_FKEY);

        return _vehicle;
    }

    @Override
    public Ride as(String alias) {
        return new Ride(DSL.name(alias), this);
    }

    @Override
    public Ride as(Name alias) {
        return new Ride(alias, this);
    }

    @Override
    public Ride as(Table<?> alias) {
        return new Ride(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ride rename(String name) {
        return new Ride(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ride rename(Name name) {
        return new Ride(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ride rename(Table<?> name) {
        return new Ride(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, LocalDate, Integer, String, String, RideStatus, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Long, ? super Long, ? super LocalDate, ? super Integer, ? super String, ? super String, ? super RideStatus, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Long, ? super Long, ? super LocalDate, ? super Integer, ? super String, ? super String, ? super RideStatus, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
