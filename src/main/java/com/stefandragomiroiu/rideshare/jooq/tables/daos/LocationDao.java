/*
 * This file is generated by jOOQ.
 */
package com.stefandragomiroiu.rideshare.jooq.tables.daos;


import com.stefandragomiroiu.rideshare.jooq.AbstractSpringDAOImpl;
import com.stefandragomiroiu.rideshare.jooq.tables.Location;
import com.stefandragomiroiu.rideshare.jooq.tables.records.LocationRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Repository
public class LocationDao extends AbstractSpringDAOImpl<LocationRecord, com.stefandragomiroiu.rideshare.jooq.tables.pojos.Location, Long> {

    /**
     * Create a new LocationDao without any configuration
     */
    public LocationDao() {
        super(Location.LOCATION, com.stefandragomiroiu.rideshare.jooq.tables.pojos.Location.class);
    }

    /**
     * Create a new LocationDao with an attached configuration
     */
    @Autowired
    public LocationDao(Configuration configuration) {
        super(Location.LOCATION, com.stefandragomiroiu.rideshare.jooq.tables.pojos.Location.class, configuration);
    }

    @Override
    public Long getId(com.stefandragomiroiu.rideshare.jooq.tables.pojos.Location object) {
        return object.getLocationId();
    }

    /**
     * Fetch records that have <code>location_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Location> fetchRangeOfLocationId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Location.LOCATION.LOCATION_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>location_id IN (values)</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Location> fetchByLocationId(Long... values) {
        return fetch(Location.LOCATION.LOCATION_ID, values);
    }

    /**
     * Fetch a unique record that has <code>location_id = value</code>
     */
    public com.stefandragomiroiu.rideshare.jooq.tables.pojos.Location fetchOneByLocationId(Long value) {
        return fetchOne(Location.LOCATION.LOCATION_ID, value);
    }

    /**
     * Fetch a unique record that has <code>location_id = value</code>
     */
    public Optional<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Location> fetchOptionalByLocationId(Long value) {
        return fetchOptional(Location.LOCATION.LOCATION_ID, value);
    }

    /**
     * Fetch records that have <code>city BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Location> fetchRangeOfCity(String lowerInclusive, String upperInclusive) {
        return fetchRange(Location.LOCATION.CITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>city IN (values)</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Location> fetchByCity(String... values) {
        return fetch(Location.LOCATION.CITY, values);
    }

    /**
     * Fetch records that have <code>county BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Location> fetchRangeOfCounty(String lowerInclusive, String upperInclusive) {
        return fetchRange(Location.LOCATION.COUNTY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>county IN (values)</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.Location> fetchByCounty(String... values) {
        return fetch(Location.LOCATION.COUNTY, values);
    }
}
