/*
 * This file is generated by jOOQ.
 */
package com.stefandragomiroiu.rideshare.jooq.tables;


import com.stefandragomiroiu.rideshare.jooq.Keys;
import com.stefandragomiroiu.rideshare.jooq.Public;
import com.stefandragomiroiu.rideshare.jooq.tables.records.VehicleRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Vehicle extends TableImpl<VehicleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.vehicle</code>
     */
    public static final Vehicle VEHICLE = new Vehicle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VehicleRecord> getRecordType() {
        return VehicleRecord.class;
    }

    /**
     * The column <code>public.vehicle.plate_number</code>.
     */
    public final TableField<VehicleRecord, String> PLATE_NUMBER = createField(DSL.name("plate_number"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.vehicle.brand</code>.
     */
    public final TableField<VehicleRecord, String> BRAND = createField(DSL.name("brand"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.vehicle.model</code>.
     */
    public final TableField<VehicleRecord, String> MODEL = createField(DSL.name("model"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.vehicle.color</code>.
     */
    public final TableField<VehicleRecord, String> COLOR = createField(DSL.name("color"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.vehicle.registration_year</code>.
     */
    public final TableField<VehicleRecord, Integer> REGISTRATION_YEAR = createField(DSL.name("registration_year"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.vehicle.seats</code>.
     */
    public final TableField<VehicleRecord, Integer> SEATS = createField(DSL.name("seats"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.vehicle.owner</code>.
     */
    public final TableField<VehicleRecord, Long> OWNER = createField(DSL.name("owner"), SQLDataType.BIGINT, this, "");

    private Vehicle(Name alias, Table<VehicleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Vehicle(Name alias, Table<VehicleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.vehicle</code> table reference
     */
    public Vehicle(String alias) {
        this(DSL.name(alias), VEHICLE);
    }

    /**
     * Create an aliased <code>public.vehicle</code> table reference
     */
    public Vehicle(Name alias) {
        this(alias, VEHICLE);
    }

    /**
     * Create a <code>public.vehicle</code> table reference
     */
    public Vehicle() {
        this(DSL.name("vehicle"), null);
    }

    public <O extends Record> Vehicle(Table<O> child, ForeignKey<O, VehicleRecord> key) {
        super(child, key, VEHICLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<VehicleRecord> getPrimaryKey() {
        return Keys.VEHICLE_PKEY;
    }

    @Override
    public List<ForeignKey<VehicleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VEHICLE__VEHICLE_OWNER_FKEY);
    }

    private transient User _user;

    /**
     * Get the implicit join path to the <code>public.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.VEHICLE__VEHICLE_OWNER_FKEY);

        return _user;
    }

    @Override
    public Vehicle as(String alias) {
        return new Vehicle(DSL.name(alias), this);
    }

    @Override
    public Vehicle as(Name alias) {
        return new Vehicle(alias, this);
    }

    @Override
    public Vehicle as(Table<?> alias) {
        return new Vehicle(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vehicle rename(String name) {
        return new Vehicle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vehicle rename(Name name) {
        return new Vehicle(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vehicle rename(Table<?> name) {
        return new Vehicle(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, Integer, Integer, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
