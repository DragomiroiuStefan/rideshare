/*
 * This file is generated by jOOQ.
 */
package com.stefandragomiroiu.rideshare.jooq.tables.daos;


import com.stefandragomiroiu.rideshare.jooq.AbstractSpringDAOImpl;
import com.stefandragomiroiu.rideshare.jooq.tables.RideConnection;
import com.stefandragomiroiu.rideshare.jooq.tables.records.RideConnectionRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Repository
public class RideConnectionDao extends AbstractSpringDAOImpl<RideConnectionRecord, com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection, Long> {

    /**
     * Create a new RideConnectionDao without any configuration
     */
    public RideConnectionDao() {
        super(RideConnection.RIDE_CONNECTION, com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection.class);
    }

    /**
     * Create a new RideConnectionDao with an attached configuration
     */
    @Autowired
    public RideConnectionDao(Configuration configuration) {
        super(RideConnection.RIDE_CONNECTION, com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection.class, configuration);
    }

    @Override
    public Long getId(com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection object) {
        return object.getConnectionId();
    }

    /**
     * Fetch records that have <code>connection_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection> fetchRangeOfConnectionId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(RideConnection.RIDE_CONNECTION.CONNECTION_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>connection_id IN (values)</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection> fetchByConnectionId(Long... values) {
        return fetch(RideConnection.RIDE_CONNECTION.CONNECTION_ID, values);
    }

    /**
     * Fetch a unique record that has <code>connection_id = value</code>
     */
    public com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection fetchOneByConnectionId(Long value) {
        return fetchOne(RideConnection.RIDE_CONNECTION.CONNECTION_ID, value);
    }

    /**
     * Fetch a unique record that has <code>connection_id = value</code>
     */
    public Optional<com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection> fetchOptionalByConnectionId(Long value) {
        return fetchOptional(RideConnection.RIDE_CONNECTION.CONNECTION_ID, value);
    }

    /**
     * Fetch records that have <code>departure_location BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection> fetchRangeOfDepartureLocation(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(RideConnection.RIDE_CONNECTION.DEPARTURE_LOCATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>departure_location IN (values)</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection> fetchByDepartureLocation(Long... values) {
        return fetch(RideConnection.RIDE_CONNECTION.DEPARTURE_LOCATION, values);
    }

    /**
     * Fetch records that have <code>arrival_location BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection> fetchRangeOfArrivalLocation(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(RideConnection.RIDE_CONNECTION.ARRIVAL_LOCATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>arrival_location IN (values)</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection> fetchByArrivalLocation(Long... values) {
        return fetch(RideConnection.RIDE_CONNECTION.ARRIVAL_LOCATION, values);
    }

    /**
     * Fetch records that have <code>departure_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection> fetchRangeOfDepartureTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(RideConnection.RIDE_CONNECTION.DEPARTURE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>departure_time IN (values)</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection> fetchByDepartureTime(LocalDateTime... values) {
        return fetch(RideConnection.RIDE_CONNECTION.DEPARTURE_TIME, values);
    }

    /**
     * Fetch records that have <code>arrival_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection> fetchRangeOfArrivalTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(RideConnection.RIDE_CONNECTION.ARRIVAL_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>arrival_time IN (values)</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection> fetchByArrivalTime(LocalDateTime... values) {
        return fetch(RideConnection.RIDE_CONNECTION.ARRIVAL_TIME, values);
    }

    /**
     * Fetch records that have <code>departure_address BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection> fetchRangeOfDepartureAddress(String lowerInclusive, String upperInclusive) {
        return fetchRange(RideConnection.RIDE_CONNECTION.DEPARTURE_ADDRESS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>departure_address IN (values)</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection> fetchByDepartureAddress(String... values) {
        return fetch(RideConnection.RIDE_CONNECTION.DEPARTURE_ADDRESS, values);
    }

    /**
     * Fetch records that have <code>arrival_address BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection> fetchRangeOfArrivalAddress(String lowerInclusive, String upperInclusive) {
        return fetchRange(RideConnection.RIDE_CONNECTION.ARRIVAL_ADDRESS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>arrival_address IN (values)</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection> fetchByArrivalAddress(String... values) {
        return fetch(RideConnection.RIDE_CONNECTION.ARRIVAL_ADDRESS, values);
    }

    /**
     * Fetch records that have <code>price BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection> fetchRangeOfPrice(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(RideConnection.RIDE_CONNECTION.PRICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>price IN (values)</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection> fetchByPrice(Integer... values) {
        return fetch(RideConnection.RIDE_CONNECTION.PRICE, values);
    }

    /**
     * Fetch records that have <code>ride_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection> fetchRangeOfRideId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(RideConnection.RIDE_CONNECTION.RIDE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ride_id IN (values)</code>
     */
    public List<com.stefandragomiroiu.rideshare.jooq.tables.pojos.RideConnection> fetchByRideId(Long... values) {
        return fetch(RideConnection.RIDE_CONNECTION.RIDE_ID, values);
    }
}
